import streamlit as st
import httpx
import json
import asyncio

from utilities import load_config

async def send_queries(queries: list, url: str) -> httpx.Response:
    try:
        async with httpx.AsyncClient(verify=False) as client:
            response = await client.post(url + '/db/insert', json=queries)
            response.raise_for_status()
            return response
    except httpx.RequestError as e:
        return e
    except httpx.HTTPStatusError as e:
        return e

def run_asyncio_task(task):
    return asyncio.run(task)

config = load_config("config.yaml")

st.set_page_config(page_title="Vulnerability Bot", page_icon="ðŸ”’")
st.title("Vulnerability Bot")
st.subheader("Send Queries")

db_url = config['urls']['db']
url = st.text_input("DB URL", db_url, key="url_input", help="Enter the URL of the DB")

st.write("Enter Query Details:")
question = st.text_input("Question", "Explain to me how to mitigate or fix this vulnerability.")
languages = st.text_input("Languages")
vulnerability = st.text_input("Vulnerability")
technologies = st.text_input("Technologies")

if 'queries' not in st.session_state:
    st.session_state['queries'] = []
if 'has_uploaded_file' not in st.session_state:
    st.session_state['has_uploaded_file'] = False

uploaded_file = st.file_uploader("Upload JSON File", type="json")
if not uploaded_file:
    st.session_state['has_uploaded_file'] = False
if uploaded_file and st.session_state['queries'] == [] and not st.session_state['has_uploaded_file']:
    try:
        file_content = json.load(uploaded_file)
        st.session_state['queries'].extend(file_content)
        st.session_state['has_uploaded_file'] = True
        st.success("File uploaded successfully!")
    except json.JSONDecodeError:
        st.error("Invalid JSON file")

if st.button("Add Query"):
    if not (question and languages and vulnerability and technologies):
        st.warning("Please fill out all fields before adding a query.")
    else:
        query = {
            "question": question,
            "languages": languages,
            "vulnerability": vulnerability,
            "technologies": technologies
        }
        st.session_state['queries'].append(query)
        st.success("Query added!")

st.write("Current Queries:")
queries = st.session_state['queries']

for idx, query in enumerate(queries):
    with st.expander(f"Query {idx + 1}"):
        col1, col2 = st.columns(2)
        with col1:
            st.write("### Edit Query")
            edited_question = st.text_input("Edit Question", value=query['question'], key=f"edit_question_{idx}")
            edited_languages = st.text_input("Edit Languages", value=query['languages'], key=f"edit_languages_{idx}")
            edited_vulnerability = st.text_input("Edit Vulnerability", value=query['vulnerability'], key=f"edit_vulnerability_{idx}")
            edited_technologies = st.text_input("Edit Technologies", value=query['technologies'], key=f"edit_technologies_{idx}")
            if st.button("Update Query", key=f"update_query_{idx}"):
                query['question'] = edited_question
                query['languages'] = edited_languages
                query['vulnerability'] = edited_vulnerability
                query['technologies'] = edited_technologies
        
        with col2:
            st.write("### Delete Query")
            if st.button("Delete Query", key=f"delete_query_{idx}"):
                st.session_state['queries'].pop(idx)
                st.rerun()
                
if st.button("Send Queries"):
    if not queries:
        st.warning("Please add queries before sending.")
        st.stop()
    try:
        response = run_asyncio_task(send_queries(queries, url))
        if isinstance(response, httpx.Response) and response.status_code == 200:
            st.success("Queries sent successfully!")
            st.session_state['queries'] = []
        else:
            st.error("Failed to send queries.")
            st.write(response)
    except Exception as e:
        st.error(f"Error: {e}")
