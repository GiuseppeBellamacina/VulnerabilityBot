from langchain_core.prompts import PromptTemplate
from langchain_core.runnables import (
    RunnableSequence,
    RunnablePassthrough
)

class Chain():
    def __init__(self, llm):
        self.llm = llm
        self.chain = self.llm
    
    def invoke(self, input):
        try:
            response = self.chain.invoke(input)
            return response
        except Exception as e:
            raise e

    def stream(self, input):
        try:
            response = {}
            out = self.chain.astream(input)
            for token in out:
                response += token
            return response
        except Exception as e:
            raise e
    
    def batch(self, input):
        try:
            response = self.chain.batch(input)
            return response
        except Exception as e:
            raise e


TEMPLATE="""You are a cybersecurity expert, and you are a proficient user of these technologies: wordpress, {technologies}. \
Consider the following vulnerability description: {vulnerability}, \
with CWE ID: {cwe} \
found in these lines of code: {code} \

QUESTION: Explain me how to fix or mitigate the vulnerability refraining from using any third party library \

REMEMBER: You can suggest small changes to the code and you can suggest to update the current versions, but not to replace any of the technology used \
IMPORTANT: You have to answer in ITALIAN language, keep your answer under 151 words excluding any code example you provide \
"""

class CyberChain(Chain):
    def __init__(self, llm):
        super().__init__(llm)
        self.name = 'CyberChain'
        
        self.prompt = PromptTemplate.from_template(TEMPLATE).with_config(run_name="CyberChainPrompt")
        
        self.sequence = RunnableSequence(
            self.prompt,
            self.llm
        ).with_config(run_name="CyberChainSequence")
        
        self.chain = (
            RunnablePassthrough.assign(
                answer=self.sequence
            ).with_config(run_name="CyberChainAnswer")
        ).with_config(run_name=self.name)
        
        print("\33[1;36m[CyberChain]\33[0m: Chain inizializzata")