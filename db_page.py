import streamlit as st
import httpx
import asyncio
import json
import pandas as pd
from io import BytesIO
from utilities import load_config

async def get_db_data(url: str) -> list:
    try:
        async with httpx.AsyncClient(verify=False) as client:
            response = await client.get(url)
            response.raise_for_status()
            return response.json()
    except (httpx.RequestError, httpx.HTTPStatusError) as e:
        st.error(f"Errore nella richiesta: {e}")
        return []

def format_data(data: list):
    formatted_data = [
        {
            "id": row["id"],
            "analysis_id": row["analysis_id"],
            "created_at": row["created_at"],
            "completed_at": row["completed_at"],
            "execution_time": row["execution_time"],
            "query":{
                "CWE": row["cwe"],
                "Code": row["code"],
                "vulnerability": row["vulnerability"],
                "technologies": row["technologies"]
            },
            "answer": row["answer"],
        }
        for row in data
    ]
    return formatted_data

def convert_time(ms: int) -> str:
    seconds = ms // 1000
    minutes = seconds // 60
    seconds = seconds % 60
    return f"{minutes}m {seconds}s"

st.set_page_config(page_title="Database", page_icon="ðŸ–¥", layout="wide")
st.title("Database")

config = load_config("config.yaml")
db_url = config['urls']['db']
url = st.text_input("DB URL", db_url, key="url_input", help="Enter the URL of the DB")
ids = st.text_input("IDs", help="Enter the IDs of the queries separated by commas or uuid")

is_uuid = st.checkbox("UUID", value=False, key="uuid_checkbox")

# Esegui una query di selezione sulla tabella queries al clic del pulsante
if st.button("Carica dati"):
    if url:
        if ids:
            if is_uuid:
                result = asyncio.run(get_db_data(url + '/db/get_u/' + ids))
            else:
                result = asyncio.run(get_db_data(url + '/db/get/' + ids))
        else:
            result = asyncio.run(get_db_data(url + '/db/get'))

        if result:
            for row in result:
                if row["completed_at"]:
                    row["execution_time"] = convert_time(row["execution_time"])
            # Visualizza i dati nel dataframe di Streamlit
            columns_list = ["id", "analysis_id", "created_at", "execution_time", "completed_at", "status", "vulnerability", "code", "technologies", "cwe", "answer"]
            st.dataframe(result, column_order=columns_list)

            data = format_data(result)
            st.download_button(
                label="Download JSON",
                data=json.dumps(data, indent=4, sort_keys=False),
                file_name="response.json",
                mime="application/json"
            )

            # Creare un buffer BytesIO per salvare il file Excel
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                pd.DataFrame(data).to_excel(writer, index=False)
            # Posizionare il cursore all'inizio del buffer
            output.seek(0)

            st.download_button(
                label="Download Excel",
                data=output,
                file_name="response.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.write("Nessun dato trovato.")
    else:
        st.error("Per favore, inserisci un URL valido.")
